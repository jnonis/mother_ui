/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void knob1_turn1(GKnob source, GEvent event) { //_CODE_:knob1:980939:
  if (!disableKnob1Callback) {
    sendKnobs();
  } else {
    disableKnob1Callback = false;
  }
} //_CODE_:knob1:980939:

public void knob2_turn1(GKnob source, GEvent event) { //_CODE_:knob2:408622:
  if (!disableKnob2Callback) {
    sendKnobs();
  } else {
    disableKnob2Callback = false;
  }
} //_CODE_:knob2:408622:

public void knob3_turn1(GKnob source, GEvent event) { //_CODE_:knob3:639422:
  if (!disableKnob3Callback) {
    sendKnobs();
  } else {
    disableKnob3Callback = false;
  }
} //_CODE_:knob3:639422:

public void knob4_turn1(GKnob source, GEvent event) { //_CODE_:knob4:870334:
  if (!disableKnob4Callback) {
    sendKnobs();
  } else {
    disableKnob4Callback = false;
  }
} //_CODE_:knob4:870334:

public void aux_click1(GButton source, GEvent event) { //_CODE_:aux:926986:
  if (event == GEvent.PRESSED) {
    sendAux(100);
  } else if (event == GEvent.CLICKED) {
    sendAux(0);
  }
} //_CODE_:aux:926986:

public void up_click1(GButton source, GEvent event) { //_CODE_:up:236270:
  if (patchList) {
    previousPatch();
  } else if (enablePatchSub) {
    sendEncoderTurn(0);
  } else {
    println("up");
    patchListMode();
  }
} //_CODE_:up:236270:

public void down_click1(GButton source, GEvent event) { //_CODE_:down:668743:
  if (patchList) {
    nextPatch();
  } else if (enablePatchSub) {
    sendEncoderTurn(1);
  } else {
    println("down");
    patchListMode();
  }
} //_CODE_:down:668743:

public void select_click1(GButton source, GEvent event) { //_CODE_:select:311979:
  if (patchList) { //<>//
    println("select patchList");
    if (event == GEvent.CLICKED) {
      println("select patchList CLICKED");
      selectPatch();
    }
  } else if (enablePatchSub) {
    println("select enablePatchSub");
    if (event == GEvent.PRESSED) {
      //sendEncoderButton(1);
    } else if (event == GEvent.CLICKED) {
      sendEncoderButton(1);
      //sendEncoderButton(0);
    }
  } else {
    if (event == GEvent.CLICKED) {
      println("select");
      patchListMode();
    }
  }
} //_CODE_:select:311979:

public void volume_turn1(GKnob source, GEvent event) { //_CODE_:volume:710386:
  if (!disableVolumeCallback) {
    sendKnobs();
  } else {
    disableVolumeCallback = false;
  }
} //_CODE_:volume:710386:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.CYAN_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  knob1 = new GKnob(this, 20, 230, 70, 70, 0.8);
  knob1.setTurnRange(110, 70);
  knob1.setTurnMode(GKnob.CTRL_ANGULAR);
  knob1.setShowArcOnly(false);
  knob1.setOverArcOnly(false);
  knob1.setIncludeOverBezel(false);
  knob1.setShowTrack(true);
  knob1.setLimits(511.0, 0.0, 1023.0);
  knob1.setShowTicks(true);
  knob1.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  knob1.setOpaque(false);
  knob1.addEventHandler(this, "knob1_turn1");
  knob2 = new GKnob(this, 110, 230, 70, 70, 0.8);
  knob2.setTurnRange(110, 70);
  knob2.setTurnMode(GKnob.CTRL_ANGULAR);
  knob2.setShowArcOnly(false);
  knob2.setOverArcOnly(false);
  knob2.setIncludeOverBezel(false);
  knob2.setShowTrack(true);
  knob2.setLimits(511.0, 0.0, 1023.0);
  knob2.setShowTicks(true);
  knob2.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  knob2.setOpaque(false);
  knob2.addEventHandler(this, "knob2_turn1");
  knob3 = new GKnob(this, 200, 230, 70, 70, 0.8);
  knob3.setTurnRange(110, 70);
  knob3.setTurnMode(GKnob.CTRL_ANGULAR);
  knob3.setShowArcOnly(false);
  knob3.setOverArcOnly(false);
  knob3.setIncludeOverBezel(false);
  knob3.setShowTrack(true);
  knob3.setLimits(511.0, 0.0, 1023.0);
  knob3.setShowTicks(true);
  knob3.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  knob3.setOpaque(false);
  knob3.addEventHandler(this, "knob3_turn1");
  knob4 = new GKnob(this, 290, 230, 70, 70, 0.8);
  knob4.setTurnRange(110, 70);
  knob4.setTurnMode(GKnob.CTRL_ANGULAR);
  knob4.setShowArcOnly(false);
  knob4.setOverArcOnly(false);
  knob4.setIncludeOverBezel(false);
  knob4.setShowTrack(true);
  knob4.setLimits(511.0, 0.0, 1023.0);
  knob4.setShowTicks(true);
  knob4.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  knob4.setOpaque(false);
  knob4.addEventHandler(this, "knob4_turn1");
  aux = new GButton(this, 395, 240, 70, 60);
  aux.setText("aux");
  aux.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  aux.addEventHandler(this, "aux_click1");
  up = new GButton(this, 395, 10, 70, 40);
  up.setText("up");
  up.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  up.addEventHandler(this, "up_click1");
  down = new GButton(this, 395, 60, 70, 40);
  down.setText("down");
  down.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  down.addEventHandler(this, "down_click1");
  select = new GButton(this, 395, 110, 70, 40);
  select.setText("select");
  select.setTextBold();
  select.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  select.addEventHandler(this, "select_click1");
  volume = new GKnob(this, 395, 160, 70, 70, 0.8);
  volume.setTurnRange(110, 70);
  volume.setTurnMode(GKnob.CTRL_ANGULAR);
  volume.setShowArcOnly(false);
  volume.setOverArcOnly(false);
  volume.setIncludeOverBezel(false);
  volume.setShowTrack(true);
  volume.setLimits(1023.0, 0.0, 1023.0);
  volume.setShowTicks(true);
  volume.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  volume.setOpaque(false);
  volume.addEventHandler(this, "volume_turn1");
}

// Variable declarations 
// autogenerated do not edit
GKnob knob1; 
GKnob knob2; 
GKnob knob3; 
GKnob knob4; 
GButton aux; 
GButton up; 
GButton down; 
GButton select; 
GKnob volume; 
